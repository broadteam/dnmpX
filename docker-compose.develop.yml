version: "3"

services:
    # NGINX
    nginx1_19:
        build:
            # 从根目录下的nginx文件夹下构建
            context: ./services/nginx/1.19
            args:
                TIME_ZONE: ${TIME_ZONE}
                CONTAINER_PACKAGE_URL: ${CONTAINER_PACKAGE_URL}
        # 容器名称
        container_name: "${NGINX1_19_CONTAINER_NAME}"
        ports:
            - "${NGINX1_19_EXPOSED_PORT}:80"
        links:
             - php7_4
        volumes:
            # 挂载nginx配置至容器
            - ${NGINX1_19_VHOST_CONF_DIR}:/etc/nginx/conf.d:rw
            - ${NGINX1_19_CONF_FILE}:/etc/nginx/nginx.conf:ro
            - ${NGINX1_19_FASTCGI_CONF}:/etc/nginx/fastcgi.conf:ro
            - ${NGINX1_19_FASTCGI_PARAMS}:/etc/nginx/fastcgi_params:ro
            - ${NGINX1_19_MIME_TYPES}:/etc/nginx/mime.types:ro
            - ${NGINX1_19_LOG_DIR}:/var/log/nginx/:rw
            # 挂载web项目目录至容器
            - ${WEB_ROOT_PATH}:/home/www:rw
        environment:
            TIME_ZONE: "$TIMEZONE"
        privileged: true
        restart: always
        networks:
            - default
            - dev-network
            #- dev-net:
            #      ipv4_address: 172.10.1.1
    # mysql57运行环境，也是网络名称
    mysql5_7:
        build:
            # 从根目录下的mysql57文件夹下构建
            context: ./services/mysql/5.7
            args:
                TIME_ZONE: ${TIME_ZONE}
                MYSQL_ROOT_PASSWORD: ${MYSQL5_7_USER_PASSWORD}
        # 容器名称
        container_name: "${MYSQL5_7_CONTAINER_NAME}"
        #image: mysql57:latest
        #environment:
        #  - MYSQL_ROOT_PASSWORD=${MYSQL5_7_USER_PASSWORD}
        #  - MYSQL_USER=${MYSQL5_7_USER_NAME}
        #  - MYSQL_PASSWORD=${MYSQL5_7_USER_PASSWORD}
        #  - MYSQL_DATABASE=${MYSQL5_7_DATABASE}
        cap_add:
            - SYS_PTRACE
        # 端口映射（不需要暴露端口）
        ports:
            - "${MYSQL5_7_EXPOSED_PORT}:3306"
        volumes:
            # 将mysql配置复制过去
            - ./volumes/mysql/5.7/my.cnf:/etc/my.cnf:rw
            # 将mysql数据库目录映射至容器
            - ${MYSQL5_7_DATA_PATH}:/var/lib/mysql:rw
        restart: always
        # 网络
        networks:
            - default
            - dev-network
            #- dev-net:
            #      ipv4_address: 172.10.1.2
    # es5_6运行环境，也是网络名称
    es5_6:
        build:
            # 从根目录下的elasticsearch5.6文件夹下构建
            context: ./services/elk/elasticsearch/5.6
            args:
                TIME_ZONE: ${TIME_ZONE}
                CONTAINER_PACKAGE_URL: ${CONTAINER_PACKAGE_URL}
        # 容器名称
        container_name: "${ES5_6_CONTAINER_NAME}"
        #environment:
        #    - ES_JAVA_OPTS=-Xms2g -Xmx2g
        #mem_limit: 2g
        #memswap_limit: 2g
        # mem_swappiness: 0
        #ulimits:
        #    memlock:
        #        soft: -1
        #        hard: -1
        #    nofile:
        #        soft: 65536
        #        hard: 65536
        cap_add:
            #- IPC_LOCK
            - SYS_PTRACE
        # 端口映射（不需要暴露端口）
        ports:
            - "${ES5_6_EXPOSED_PORT}:9200"
        volumes:
            # 挂载es配置至容器
            - ./volumes/elasticsearch/5.6/config/elasticsearch.yml:/usr/local/elasticsearch/config/elasticsearch.yml:rw
            - ./volumes/elasticsearch/5.6/config/log4j2.properties:/usr/local/elasticsearch/config/log4j2.properties:rw
            #- ./volumes/elasticsearch/5.6/config/jvm.options:/usr/local/elasticsearch/config/jvm.options:rw
            # 挂载es数据库目录至容器
            - ${ES5_6_DATA_PATH}:/usr/local/elasticsearch/data:rw
            # 挂载es日志目录至容器
            - ${ES5_6_LOGS_PATH}:/usr/local/elasticsearch/logs:rw
            # 挂载es快照目录至容器
            - ${ES5_6_SNAPSHOT_PATH}:/usr/local/elasticsearch/snapshot:rw
        restart: always
        # 网络
        networks:
            - default
            - dev-network
            #- dev-net:
            #      ipv4_address: 172.10.1.3
    # es6_8运行环境，也是网络名称
    es6_8:
        build:
            # 从根目录下的elasticsearch6.8文件夹下构建
            context: ./services/elk/elasticsearch/6.8
            args:
                TIME_ZONE: ${TIME_ZONE}
                CONTAINER_PACKAGE_URL: ${CONTAINER_PACKAGE_URL}
        # 容器名称
        container_name: "${ES6_8_CONTAINER_NAME}"
        #environment:
        #    - ES_JAVA_OPTS=-Xms2g -Xmx2g
        #mem_limit: 2g
        #memswap_limit: 2g
        # mem_swappiness: 0
        #ulimits:
        #    memlock:
        #        soft: -1
        #        hard: -1
        #    nofile:
        #        soft: 65536
        #        hard: 65536
        cap_add:
            #- IPC_LOCK
            - SYS_PTRACE
        # 端口映射（不需要暴露端口）
        ports:
            - "${ES6_8_EXPOSED_PORT}:9200"
        volumes:
            # 挂载es配置至容器
            - ./volumes/elasticsearch/6.8/config/elasticsearch.yml:/usr/local/elasticsearch/config/elasticsearch.yml:rw
            - ./volumes/elasticsearch/6.8/config/log4j2.properties:/usr/local/elasticsearch/config/log4j2.properties:rw
            - ./volumes/elasticsearch/6.8/config/jvm.options:/usr/local/elasticsearch/config/jvm.options:rw
            # 挂载es数据库目录至容器
            - ${ES6_8_DATA_PATH}:/usr/local/elasticsearch/data:rw
            # 挂载es日志目录至容器
            - ${ES6_8_LOGS_PATH}:/usr/local/elasticsearch/logs:rw
            # 挂载es快照目录至容器
            - ${ES6_8_SNAPSHOT_PATH}:/usr/local/elasticsearch/snapshot:rw
        restart: always
        # 网络
        networks:
            - default
            - dev-network
            #- dev-net:
            #      ipv4_address: 172.10.1.4
    # es7_10运行环境，也是网络名称
    es7_10:
        build:
            # 从根目录下的elasticsearch7.10文件夹下构建
            context: ./services/elk/elasticsearch/7.10
            args:
                TIME_ZONE: ${TIME_ZONE}
                CONTAINER_PACKAGE_URL: ${CONTAINER_PACKAGE_URL}
        # 容器名称
        container_name: "${ES7_10_CONTAINER_NAME}"
        #environment:
        #    - ES_JAVA_OPTS=-Xms2g -Xmx2g
        #mem_limit: 2g
        #memswap_limit: 2g
        # mem_swappiness: 0
        #ulimits:
        #    memlock:
        #        soft: -1
        #        hard: -1
        #    nofile:
        #        soft: 65536
        #        hard: 65536
        cap_add:
            #- IPC_LOCK
            - SYS_PTRACE
        # 端口映射（不需要暴露端口）
        ports:
            - "${ES7_10_EXPOSED_PORT}:9200"
        volumes:
            # 挂载es配置至容器
            - ./volumes/elasticsearch/7.10/config/elasticsearch.yml:/usr/local/elasticsearch/config/elasticsearch.yml:rw
            - ./volumes/elasticsearch/7.10/config/log4j2.properties:/usr/local/elasticsearch/config/log4j2.properties:rw
            - ./volumes/elasticsearch/7.10/config/jvm.options:/usr/local/elasticsearch/config/jvm.options:rw
            # 挂载es数据库目录至容器
            - ${ES7_10_DATA_PATH}:/usr/local/elasticsearch/data:rw
            # 挂载es日志目录至容器
            - ${ES7_10_LOGS_PATH}:/usr/local/elasticsearch/logs:rw
            # 挂载es快照目录至容器
            - ${ES7_10_SNAPSHOT_PATH}:/usr/local/elasticsearch/snapshot:rw
        restart: always
        # 网络
        networks:
            - default
            - dev-network
            #- dev-net:
            #      ipv4_address: 172.10.1.5
    # redis6.2运行环境，也是网络名称
    redis6_2:
        build:
            # 从根目录下的redis文件夹下构建
            context: ./services/redis/6.2
            args:
                TIME_ZONE: ${TIME_ZONE}
                CONTAINER_PACKAGE_URL: ${CONTAINER_PACKAGE_URL}
        # 容器名称
        container_name: "${REDIS6_2_CONTAINER_NAME}"
        cap_add:
            - SYS_PTRACE
        # 端口映射（不需要暴露端口）
        ports:
            - "${REDIS6_2_EXPOSED_PORT}:6379"
        volumes:
            # 挂载redis配置至容器
            - ./volumes/redis/conf/redis.conf:/etc/redis.conf:rw
            # 挂载redis数据库目录至容器
            - ${REDIS6_2_DATA_PATH}:/data:rw
            # 挂载redis日志目录至容器
            - ${REDIS6_2_LOGS_PATH}:/logs:rw
        # 覆盖容器启动的redis.conf
        command: redis-server /etc/redis.conf
        restart: always
        # 网络
        networks:
            - default
            - dev-network
            #- dev-net:
            #      ipv4_address: 172.10.1.6
    # php5.6-fpm运行环境，也是网络名称
    php5_6:
        build:
            context: ./services/php/5.6
            # 环境变量传入
            args:
                TIME_ZONE: ${TIME_ZONE}
                CONTAINER_PACKAGE_URL: ${CONTAINER_PACKAGE_URL}
                COMPOSER_MIRRORS_URL: ${COMPOSER_MIRRORS_URL}
        # 容器名称
        container_name: "${PHP5_6_FPM_CONTAINER_NAME}"
        # 容器的权限设置（privileged/cap-add/cap-drop）
        cap_add:
            - SYS_PTRACE
        # 端口映射（不需要暴露端口）
        ports:
            - "${PHP5_6_FPM_EXPOSED_PORT}:9000"
        extra_hosts:
            - "fairs.dev.com:${MAIN_HOST_IP}"
            - "fairs-server.dev.com:${MAIN_HOST_IP}"
        volumes:
            # 挂载web项目目录至容器
            - ${WEB_ROOT_PATH}:/home/www:rw
        restart: always
        # 网络
        networks:
            - default
            - dev-network
            #- dev-net:
            #      ipv4_address: 172.10.1.7
    # php7.0-fpm运行环境，也是网络名称
    php7_0:
        build:
            context: ./services/php/7.0
            # 环境变量传入
            args:
                TIME_ZONE: ${TIME_ZONE}
                CONTAINER_PACKAGE_URL: ${CONTAINER_PACKAGE_URL}
                COMPOSER_MIRRORS_URL: ${COMPOSER_MIRRORS_URL}
        # 容器名称
        container_name: "${PHP7_0_FPM_CONTAINER_NAME}"
        # 容器的权限设置（privileged/cap-add/cap-drop）
        privileged: true
        cap_add:
            - SYS_PTRACE
        # 端口映射（不需要暴露端口）
        ports:
            - "${PHP7_0_FPM_EXPOSED_PORT}:9000"
            - "2120:2120"
            - "2121:2121"
            - "2123:2123"
            - "2125:2125"
            - "2126:2126"
        extra_hosts:
            - "websocket.dev.com:${MAIN_HOST_IP}"
            - "fairs.dev.com:${MAIN_HOST_IP}"
            - "fairs-server.dev.com:${MAIN_HOST_IP}"
        volumes:
            # 挂载web项目目录至容器
            - ${WEB_ROOT_PATH}:/home/www:rw
            - ./volumes/php/7.0/php.ini:/usr/local/etc/php/php.ini:rw
            - ./volumes/php/7.0/docker-entrypoint.sh:/usr/bin/docker-entrypoint.sh:rw
        # 启动命令
        #command: /bin/sh /usr/bin/docker-entrypoint.sh
        restart: always
        # 网络
        networks:
            - default
            - dev-network
            #- dev-net:
            #      ipv4_address: 172.10.1.8
    # php7.1-fpm运行环境，也是网络名称
    php7_1:
        build:
            context: ./services/php/7.1
            # 环境变量传入
            args:
                TIME_ZONE: ${TIME_ZONE}
                CONTAINER_PACKAGE_URL: ${CONTAINER_PACKAGE_URL}
                COMPOSER_MIRRORS_URL: ${COMPOSER_MIRRORS_URL}
        # 容器名称
        container_name: "${PHP7_1_FPM_CONTAINER_NAME}"
        # 容器的权限设置（privileged/cap-add/cap-drop）
        cap_add:
            - SYS_PTRACE
        # 端口映射（不需要暴露端口）
        ports:
            - "${PHP7_1_FPM_EXPOSED_PORT}:9000"
        extra_hosts:
            - "fairs.dev.com:${MAIN_HOST_IP}"
            - "fairs-server.dev.com:${MAIN_HOST_IP}"
        volumes:
            # 挂载web项目目录至容器
            - ${WEB_ROOT_PATH}:/home/www:rw
        restart: always
        # 网络
        networks:
            - default
            - dev-network
            #- dev-net:
            #      ipv4_address: 172.10.1.9
    # php7.2-fpm运行环境，也是网络名称
    php7_2:
        build:
            context: ./services/php/7.2
            # 环境变量传入
            args:
                TIME_ZONE: ${TIME_ZONE}
                CONTAINER_PACKAGE_URL: ${CONTAINER_PACKAGE_URL}
                COMPOSER_MIRRORS_URL: ${COMPOSER_MIRRORS_URL}
        # 容器名称
        container_name: "${PHP7_2_FPM_CONTAINER_NAME}"
        # 容器的权限设置（privileged/cap-add/cap-drop）
        cap_add:
            - SYS_PTRACE
        # 端口映射（不需要暴露端口）
        ports:
            - "${PHP7_2_FPM_EXPOSED_PORT}:9000"
        extra_hosts:
            - "customer-pc.dev.com:${MAIN_HOST_IP}"
            - "pc-server.dev.com:${MAIN_HOST_IP}"
        volumes:
            # 挂载web项目目录至容器
            - ${WEB_ROOT_PATH}:/home/www:rw
        restart: always
        # 网络
        networks:
            - default
            - dev-network
            #- dev-net:
            #      ipv4_address: 172.10.1.10
    # php7.3-fpm运行环境，也是网络名称
    php7_3:
        build:
            context: ./services/php/7.3
            # 环境变量传入
            args:
                TIME_ZONE: ${TIME_ZONE}
                CONTAINER_PACKAGE_URL: ${CONTAINER_PACKAGE_URL}
                COMPOSER_MIRRORS_URL: ${COMPOSER_MIRRORS_URL}
        # 容器名称
        container_name: "${PHP7_3_FPM_CONTAINER_NAME}"
        # 容器的权限设置（privileged/cap-add/cap-drop）
        cap_add:
            - SYS_PTRACE
        # 端口映射（不需要暴露端口）
        ports:
            - "${PHP7_3_FPM_EXPOSED_PORT}:9000"
        extra_hosts:
            - "customer-pc.dev.com:${MAIN_HOST_IP}"
            - "pc-server.dev.com:${MAIN_HOST_IP}"
        volumes:
            # 挂载web项目目录至容器
            - ${WEB_ROOT_PATH}:/home/www:rw
        restart: always
        # 网络
        networks:
            - default
            - dev-network
            #- dev-net:
            #      ipv4_address: 172.10.1.11
    # php7.4-fpm运行环境，也是网络名称
    php7_4:
        build:
            context: ./services/php/7.4
            # 环境变量传入
            args:
                TIME_ZONE: ${TIME_ZONE}
                CONTAINER_PACKAGE_URL: ${CONTAINER_PACKAGE_URL}
                COMPOSER_MIRRORS_URL: ${COMPOSER_MIRRORS_URL}
        # 容器名称
        container_name: "${PHP7_4_FPM_CONTAINER_NAME}"
        # 容器的权限设置（privileged/cap-add/cap-drop）
        cap_add:
            - SYS_PTRACE
        # 端口映射（不需要暴露端口）
        ports:
            - "${PHP7_4_FPM_EXPOSED_PORT}:9000"
        extra_hosts:
            - "customer-pc.dev.com:${MAIN_HOST_IP}"
            - "pc-server.dev.com:${MAIN_HOST_IP}"
        volumes:
            # 挂载web项目目录至容器
            - ${WEB_ROOT_PATH}:/home/www:rw
            - ./volumes/php/7.4/php.ini:/usr/local/etc/php/php.ini:rw
        restart: always
        # 网络
        networks:
            - default
            - dev-network
            #- dev-net:
            #      ipv4_address: 172.10.1.12
networks:
    #default:
    dev-network:
        #external: true
        driver: bridge
        ipam:
            config:
                # 子网络
                - subnet: ${NETWORK_SEGMENT}
    #dwnet:
    #    driver: bridge
    #    ipam:
    #        driver: default
    #        config:
    #            - subnet: 172.10.1.93/24
