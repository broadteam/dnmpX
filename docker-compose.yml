version: "3"

services:
    # NGINX
    nginx1_19:
        build:
            # 从根目录下的nginx文件夹下构建
            context: ./services/nginx
            args:
                TIME_ZONE: ${TIME_ZONE}
                CONTAINER_PACKAGE_URL: ${CONTAINER_PACKAGE_URL}
        # 容器名称
        container_name: "${NGINX1_19_CONTAINER_NAME}"
        ports:
            - "${NGINX1_19_EXPOSED_PORT}:80"
        links:
             - php7_4
        volumes:
            # 挂载nginx配置至容器
            - ./volumes/nginx/conf.d:/etc/nginx/conf.d:rw
            # 挂载web项目目录至容器
            - ${WEB_ROOT_PATH}:/home/www:rw
            # 挂载web配置目录至容器
            - ${WEB_CONFIG_PATH}:/home/www/data:rw
        environment:
            TIME_ZONE: "$TIMEZONE"
        privileged: true
        restart: always
        networks:
            - default
            - dev-network
    # mysql57运行环境，也是网络名称
    mysql5_7:
        build:
            # 从根目录下的mysql57文件夹下构建
            context: ./services/mysql5.7
            args:
                TIME_ZONE: ${TIME_ZONE}
                MYSQL_ROOT_PASSWORD: ${MYSQL5_7_USER_PASSWORD}
        # 容器名称
        container_name: "${MYSQL5_7_CONTAINER_NAME}"
        #image: mysql57:latest
        #environment:
        #  - MYSQL_ROOT_PASSWORD=${MYSQL5_7_USER_PASSWORD}
        #  - MYSQL_USER=${MYSQL5_7_USER_NAME}
        #  - MYSQL_PASSWORD=${MYSQL5_7_USER_PASSWORD}
        #  - MYSQL_DATABASE=${MYSQL5_7_DATABASE}
        cap_add:
            - SYS_PTRACE
        # 端口映射（不需要暴露端口）
        ports:
            - "${MYSQL5_7_EXPOSED_PORT}:3306"
        volumes:
            # 将mysql配置复制过去
            - ./volumes/mysql/5.7/my.cnf:/etc/my.cnf:rw
            # 将mysql数据库目录映射至容器
            - ${MYSQL5_7_DATA_PATH}:/var/lib/mysql:rw
        restart: always
        # 网络
        networks:
            - default
            - dev-network
    # es6_8_12运行环境，也是网络名称
    elasticsearch6_8:
        build:
            # 从根目录下的elasticsearch-6.8.12文件夹下构建
            context: ./services/elasticsearch-6.8.12
            args:
                TIME_ZONE: ${TIME_ZONE}
                CONTAINER_PACKAGE_URL: ${CONTAINER_PACKAGE_URL}
        # 容器名称
        container_name: "${ES6_8_CONTAINER_NAME}"
        cap_add:
            - SYS_PTRACE
        # 端口映射（不需要暴露端口）
        ports:
            - "${ES6_8_EXPOSED_PORT}:9200"
        volumes:
            # 挂载es配置至容器
            - ./volumes/elasticsearch/config/elasticsearch.yml:/usr/share/elasticsearch/config/elasticsearch.yml:rw
            # 挂载es数据库目录至容器
            - ${ES6_8_DATA_PATH}:/usr/share/elasticsearch/data:rw
            # 挂载es日志目录至容器
            - ${ES6_8_LOGS_PATH}:/usr/share/elasticsearch/logs:rw
        restart: always
        # 网络
        networks:
            - default
            - dev-network
    # redis6.2运行环境，也是网络名称
    redis6_2:
        build:
            # 从根目录下的redis文件夹下构建
            context: ./services/redis
            args:
                TIME_ZONE: ${TIME_ZONE}
                CONTAINER_PACKAGE_URL: ${CONTAINER_PACKAGE_URL}
        # 容器名称
        container_name: "${REDIS6_2_CONTAINER_NAME}"
        cap_add:
            - SYS_PTRACE
        # 端口映射（不需要暴露端口）
        ports:
            - "${REDIS6_2_EXPOSED_PORT}:6379"
        volumes:
            # 挂载redis配置至容器
            - ./volumes/redis/conf/redis.conf:/etc/redis.conf:rw
            # 挂载redis数据库目录至容器
            - ${REDIS6_2_DATA_PATH}:/data:rw
            # 挂载redis日志目录至容器
            - ${REDIS6_2_LOGS_PATH}:/logs:rw
        # 覆盖容器启动的redis.conf
        command: redis-server /etc/redis.conf
        restart: always
        # 网络
        networks:
            - default
            - dev-network
    # php5.6-fpm运行环境，也是网络名称
    php5_6:
        build:
            context: ./services/php5.6
            # 环境变量传入
            args:
                TIME_ZONE: ${TIME_ZONE}
                CONTAINER_PACKAGE_URL: ${CONTAINER_PACKAGE_URL}
                COMPOSER_MIRRORS_URL: ${COMPOSER_MIRRORS_URL}
        # 容器名称
        container_name: "${PHP5_6_FPM_CONTAINER_NAME}"
        # 容器的权限设置（privileged/cap-add/cap-drop）
        cap_add:
            - SYS_PTRACE
        # 端口映射（不需要暴露端口）
        ports:
            - "${PHP5_6_FPM_EXPOSED_PORT}:9000"
        extra_hosts:
            - "fairs.dev.com:${MAIN_HOST_IP}"
            - "fairs-server.dev.com:${MAIN_HOST_IP}"
        volumes:
            # 挂载web项目目录至容器
            - ${WEB_ROOT_PATH}:/home/www:rw
            # 挂载web配置目录至容器
            - ${WEB_CONFIG_PATH}:/home/www/data:rw
        restart: always
        # 网络
        networks:
            - default
            - dev-network
    # php7.0-fpm运行环境，也是网络名称
    php7_0:
        build:
            context: ./services/php7.0
            # 环境变量传入
            args:
                TIME_ZONE: ${TIME_ZONE}
                CONTAINER_PACKAGE_URL: ${CONTAINER_PACKAGE_URL}
                COMPOSER_MIRRORS_URL: ${COMPOSER_MIRRORS_URL}
        # 容器名称
        container_name: "${PHP7_0_FPM_CONTAINER_NAME}"
        # 容器的权限设置（privileged/cap-add/cap-drop）
        cap_add:
            - SYS_PTRACE
        # 端口映射（不需要暴露端口）
        ports:
            - "${PHP7_0_FPM_EXPOSED_PORT}:9000"
        extra_hosts:
            - "fairs.dev.com:${MAIN_HOST_IP}"
            - "fairs-server.dev.com:${MAIN_HOST_IP}"
        volumes:
            # 挂载web项目目录至容器
            - ${WEB_ROOT_PATH}:/home/www:rw
            # 挂载web配置目录至容器
            - ${WEB_CONFIG_PATH}:/home/www/data:rw
        restart: always
        # 网络
        networks:
            - default
            - dev-network
    # php7.1-fpm运行环境，也是网络名称
    php7_1:
        build:
            context: ./services/php7.1
            # 环境变量传入
            args:
                TIME_ZONE: ${TIME_ZONE}
                CONTAINER_PACKAGE_URL: ${CONTAINER_PACKAGE_URL}
                COMPOSER_MIRRORS_URL: ${COMPOSER_MIRRORS_URL}
        # 容器名称
        container_name: "${PHP7_1_FPM_CONTAINER_NAME}"
        # 容器的权限设置（privileged/cap-add/cap-drop）
        cap_add:
            - SYS_PTRACE
        # 端口映射（不需要暴露端口）
        ports:
            - "${PHP7_1_FPM_EXPOSED_PORT}:9000"
        extra_hosts:
            - "fairs.dev.com:${MAIN_HOST_IP}"
            - "fairs-server.dev.com:${MAIN_HOST_IP}"
        volumes:
            # 挂载web项目目录至容器
            - ${WEB_ROOT_PATH}:/home/www:rw
            # 挂载web配置目录至容器
            - ${WEB_CONFIG_PATH}:/home/www/data:rw
        restart: always
        # 网络
        networks:
            - default
            - dev-network
    # php7.2-fpm运行环境，也是网络名称
    php7_2:
        build:
            context: ./services/php7.2
            # 环境变量传入
            args:
                TIME_ZONE: ${TIME_ZONE}
                CONTAINER_PACKAGE_URL: ${CONTAINER_PACKAGE_URL}
                COMPOSER_MIRRORS_URL: ${COMPOSER_MIRRORS_URL}
        # 容器名称
        container_name: "${PHP7_2_FPM_CONTAINER_NAME}"
        # 容器的权限设置（privileged/cap-add/cap-drop）
        cap_add:
            - SYS_PTRACE
        # 端口映射（不需要暴露端口）
        ports:
            - "${PHP7_2_FPM_EXPOSED_PORT}:9000"
        extra_hosts:
            - "customer-pc.dev.com:${MAIN_HOST_IP}"
            - "pc-server.dev.com:${MAIN_HOST_IP}"
        volumes:
            # 挂载web项目目录至容器
            - ${WEB_ROOT_PATH}:/home/www:rw
            # 挂载web配置目录至容器
            - ${WEB_CONFIG_PATH}:/home/www/data:rw
        restart: always
        # 网络
        networks:
            - default
            - dev-network
    # php7.3-fpm运行环境，也是网络名称
    php7_3:
        build:
            context: ./services/php7.3
            # 环境变量传入
            args:
                TIME_ZONE: ${TIME_ZONE}
                CONTAINER_PACKAGE_URL: ${CONTAINER_PACKAGE_URL}
                COMPOSER_MIRRORS_URL: ${COMPOSER_MIRRORS_URL}
        # 容器名称
        container_name: "${PHP7_3_FPM_CONTAINER_NAME}"
        # 容器的权限设置（privileged/cap-add/cap-drop）
        cap_add:
            - SYS_PTRACE
        # 端口映射（不需要暴露端口）
        ports:
            - "${PHP7_3_FPM_EXPOSED_PORT}:9000"
        extra_hosts:
            - "customer-pc.dev.com:${MAIN_HOST_IP}"
            - "pc-server.dev.com:${MAIN_HOST_IP}"
        volumes:
            # 挂载web项目目录至容器
            - ${WEB_ROOT_PATH}:/home/www:rw
            # 挂载web配置目录至容器
            - ${WEB_CONFIG_PATH}:/home/www/data:rw
        restart: always
        # 网络
        networks:
            - default
            - dev-network
    # php7.4-fpm运行环境，也是网络名称
    php7_4:
        build:
            context: ./services/php7.4
            # 环境变量传入
            args:
                TIME_ZONE: ${TIME_ZONE}
                CONTAINER_PACKAGE_URL: ${CONTAINER_PACKAGE_URL}
                COMPOSER_MIRRORS_URL: ${COMPOSER_MIRRORS_URL}
        # 容器名称
        container_name: "${PHP7_4_FPM_CONTAINER_NAME}"
        # 容器的权限设置（privileged/cap-add/cap-drop）
        cap_add:
            - SYS_PTRACE
        # 端口映射（不需要暴露端口）
        ports:
            - "${PHP7_4_FPM_EXPOSED_PORT}:9000"
        extra_hosts:
            - "customer-pc.dev.com:${MAIN_HOST_IP}"
            - "pc-server.dev.com:${MAIN_HOST_IP}"
        volumes:
            # 挂载web项目目录至容器
            - ${WEB_ROOT_PATH}:/home/www:rw
            # 挂载web配置目录至容器
            - ${WEB_CONFIG_PATH}:/home/www/data:rw
        restart: always
        # 网络
        networks:
            - default
            - dev-network
networks:
    #default:
    dev-network:
        #external: true
        driver: bridge
        ipam:
            config:
                # 子网络
                - subnet: ${NETWORK_SEGMENT}
